"use strict";(self.webpackChunkreact_native_visionos_docs=self.webpackChunkreact_native_visionos_docs||[]).push([[642],{2548:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>d,toc:()=>c});var t=i(4848),s=i(8453);const a={},o="Deep and Universal Links",d={id:"docs/guides/deep-and-universal-links",title:"Deep and Universal Links",description:"Deep and Universal Links work differently on visionOS. Because we are using SwiftUI lifecycle, it's necessary to implement different methods to capture external links.",source:"@site/docs/docs/guides/deep-and-universal-links.md",sourceDirName:"docs/guides",slug:"/docs/guides/deep-and-universal-links",permalink:"/react-native-visionos-docs/docs/guides/deep-and-universal-links",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Guides",permalink:"/react-native-visionos-docs/category/guides"},next:{title:"Immersive Spaces",permalink:"/react-native-visionos-docs/docs/guides/immersive-spaces"}},r={},c=[{value:"Project configuration",id:"project-configuration",level:2},{value:"Deep Links",id:"deep-links",level:3},{value:"Universal Links",id:"universal-links",level:3},{value:"Implementation",id:"implementation",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"deep-and-universal-links",children:"Deep and Universal Links"}),"\n",(0,t.jsxs)(n.p,{children:["Deep and Universal Links work differently on visionOS. Because we are using ",(0,t.jsx)(n.a,{href:"/docs/getting-started/entry-point",children:"SwiftUI lifecycle"}),", it's necessary to implement different methods to capture external links."]}),"\n",(0,t.jsx)(n.h2,{id:"project-configuration",children:"Project configuration"}),"\n",(0,t.jsx)(n.p,{children:"First, you need to configure your Xcode project. These are the same steps you need to take for setting up Deep and Universal Links in any standard React Native project."}),"\n",(0,t.jsx)(n.h3,{id:"deep-links",children:"Deep Links"}),"\n",(0,t.jsxs)(n.p,{children:["For the operating system to be able to detect your app's URL scheme (such as ",(0,t.jsx)(n.code,{children:"myspatialapp://"}),') you need to add URL Types, found in the "Info" tab.']}),"\n",(0,t.jsx)(n.p,{children:'In the "Identifier" field put your app\'s bundle ID, and in the "URL Schemes" field put your desired URL scheme.'}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"URL Types",src:i(5798).A+"",width:"1322",height:"554"})}),"\n",(0,t.jsx)(n.h3,{id:"universal-links",children:"Universal Links"}),"\n",(0,t.jsx)(n.p,{children:'To be able to support Universal Links, you need to add the associated domain in the "Associated Domains" section of the "Signing & Capabilities" tab.'}),"\n",(0,t.jsxs)(n.p,{children:["The associated domain should be in the format ",(0,t.jsx)(n.code,{children:"applinks:<your-domain>"}),". The domain doesn't need to be the same as in your bundle ID, but you need to have access to it because you will need to host a static file called ",(0,t.jsx)(n.code,{children:"apple-app-site-association"})," in order to link your app bundle ID to your website domain."]}),"\n",(0,t.jsxs)(n.p,{children:["For additional information, see the official Apple docs on ",(0,t.jsx)(n.a,{href:"https://developer.apple.com/documentation/Xcode/supporting-associated-domains",children:"Supporting associated domains"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Associated Domains",src:i(9411).A+"",width:"1283",height:"531"})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"The Associated Domains capability requires a paid Apple Developer account."})}),"\n",(0,t.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,t.jsxs)(n.p,{children:["The recommended way to capture Deep and Universal links is by implementing the ",(0,t.jsx)(n.code,{children:"onOpenURL"})," view modifier."]}),"\n",(0,t.jsxs)(n.p,{children:["In ",(0,t.jsx)(n.code,{children:"App.swift"}),", add the ",(0,t.jsx)(n.code,{children:"onOpenURL"})," modifier to ",(0,t.jsx)(n.code,{children:"RCTMainWindow"})," and forward the captured URL to React Native's ",(0,t.jsx)(n.code,{children:"RCTLinkingManager"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-swift",metastring:'title="App.swift"',children:'import SwiftUI\nimport React\nimport React_RCTSwiftExtensions\n\n@main\nstruct MySpatialAppApp: App {\n  @UIApplicationDelegateAdaptor var delegate: AppDelegate\n  \n  var body: some Scene {\n    RCTMainWindow(moduleName: "MySpatialApp")\n      // Add the view modifier\n      .onOpenURL { url in\n        // Forward the URL to React Native\n        RCTLinkingManager.onOpenURL(url: url)\n      }\n  }\n}\n\n\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Finally, you should be able to access the URL in the JavaScript side by using the standard ",(0,t.jsx)(n.a,{href:"https://reactnative.dev/docs/linking",children:"React Native Linking API"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:'title="App.tsx"',children:"import {useEffect} from 'react';\nimport {Linking} from 'react-native';\n\nfunction App() {\n  useEffect(() => {\n    const getInitialUrl = async () => {\n      const initialUrl = await Linking.getInitialURL();\n      console.log('initialUrl', initialUrl);\n    };\n\n    getInitialUrl();\n\n    const listener = Linking.addEventListener('url', event => {\n      console.log('Received URL: ', event.url);\n    });\n\n    return () => {\n      listener.remove();\n    };\n  }, []);\n}\n\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},9411:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/deep-and-universal-links-associated-domains-5c9fe96b4ddf13eb0bfd7d1defb3ed6a.png"},5798:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/deep-and-universal-links-url-types-2cde7717953edfb31ca7a22786ae308b.png"},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>d});var t=i(6540);const s={},a=t.createContext(s);function o(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);