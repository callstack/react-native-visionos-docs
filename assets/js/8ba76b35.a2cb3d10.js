"use strict";(self.webpackChunkreact_native_visionos_docs=self.webpackChunkreact_native_visionos_docs||[]).push([[853],{3979:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>t,metadata:()=>a,toc:()=>l});var i=s(4848),r=s(8453);const t={},o="Immersive Spaces",a={id:"docs/guides/immersive-spaces",title:"Immersive Spaces",description:"One of the key features of visionOS are ImmersiveSpaces, which allow to display unbounded content in a person\u2019s surroundings.",source:"@site/docs/docs/guides/immersive-spaces.md",sourceDirName:"docs/guides",slug:"/docs/guides/immersive-spaces",permalink:"/react-native-visionos-docs/docs/guides/immersive-spaces",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Deep and Universal Links",permalink:"/react-native-visionos-docs/docs/guides/deep-and-universal-links"},next:{title:"Ornaments",permalink:"/react-native-visionos-docs/docs/guides/ornaments"}},c={},l=[{value:"Declare ImmersiveSpace in <code>App.swift</code>",id:"declare-immersivespace-in-appswift",level:3},{value:"Open new ImmersiveSpace from JS",id:"open-new-immersivespace-from-js",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"immersive-spaces",children:"Immersive Spaces"}),"\n",(0,i.jsxs)(n.p,{children:["One of the key features of visionOS are ",(0,i.jsx)(n.a,{href:"https://developer.apple.com/documentation/swiftui/immersive-spaces",children:(0,i.jsx)(n.code,{children:"ImmersiveSpaces"})}),", which allow to display unbounded content in a person\u2019s surroundings."]}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:["Make sure to set ",(0,i.jsx)(n.code,{children:"UIApplicationSupportsMultipleScenes"})," to ",(0,i.jsx)(n.code,{children:"true"})," in ",(0,i.jsx)(n.code,{children:"Info.plist"})," as described ",(0,i.jsx)(n.a,{href:"/api/window-manager#uiapplicationsupportsmultiplescenes",children:"here"}),"."]})}),"\n",(0,i.jsxs)(n.h3,{id:"declare-immersivespace-in-appswift",children:["Declare ImmersiveSpace in ",(0,i.jsx)(n.code,{children:"App.swift"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",metastring:'title="App.swift"',children:'@main\nstruct HelloWorldApp: App {\n  @UIApplicationDelegateAdaptor var delegate: AppDelegate\n  // highlight-next-line\n  @State private var immersionLevel: ImmersionStyle = .mixed\n\n  var body: some Scene {\n    RCTMainWindow(moduleName: "HelloWorldApp")\n// highlight-start\n    ImmersiveSpace(id: "TestImmersiveSpace") {\n      // RealityKit content goes here\n    }\n     .immersionStyle(selection: $immersionLevel, in: .mixed, .progressive, .full)\n// highlight-end\n  }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"ImmersiveSpaces can have multiple levels of immersion:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The mixed style blends your content with passthrough."}),"\n",(0,i.jsx)(n.li,{children:"The full style displays only your content, with passthrough turned off."}),"\n",(0,i.jsx)(n.li,{children:"The progressive style completely replaces passthrough in a portion of the display."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["For more information about ",(0,i.jsx)(n.code,{children:"ImmersiveSpace"})," API refer to ",(0,i.jsx)(n.a,{href:"https://developer.apple.com/documentation/swiftui/immersive-spaces",children:"Apple documentation"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"open-new-immersivespace-from-js",children:"Open new ImmersiveSpace from JS"}),"\n",(0,i.jsxs)(n.p,{children:["In order to open a new ImmersiveSpace, call ",(0,i.jsx)(n.code,{children:"XR.requestSession()"}),". Additionally you can pass data that can be retrieved in SwiftUI, checkout ",(0,i.jsx)(n.a,{href:"/api/window-manager#optional-5-use-swiftui-to-render-windows",children:"use SwiftUI to render windows"})," to learn more."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { XR } from "@callstack/react-native-visionos";\n//...\nconst openXRSession = async () => {\n  try {\n    if (!XR.supportsMultipleScenes) {\n      Alert.alert("Error", "Multiple scenes are not supported");\n      return;\n    }\n    // highlight-next-line\n    await XR.requestSession("TestImmersiveSpace", { title: "Hey!" }); // Pass the same identifier from `App.swift`\n  } catch (e) {\n    Alert.alert("Error", e.message);\n  }\n};\n'})}),"\n",(0,i.jsxs)(n.admonition,{type:"warning",children:[(0,i.jsxs)(n.p,{children:["Opening an ",(0,i.jsx)(n.code,{children:"ImmersiveSpace"})," can fail in following scenarios:"]}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ImmersiveSpace"})," is not declared."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"UIApplicationSupportsMultipleScenes"})," is set to ",(0,i.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"User cancels the request."}),"\n"]})]}),"\n",(0,i.jsx)(n.p,{children:"This will open a new immersive space for the user. Later on if you want to close it, call:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const closeXRSession = async () => {\n  // highlight-next-line\n  await XR.endSession();\n};\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"Only one immersive space can be open at a time."})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var i=s(6540);const r={},t=i.createContext(r);function o(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);