"use strict";(self.webpackChunkreact_native_visionos_docs=self.webpackChunkreact_native_visionos_docs||[]).push([[454],{1242:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var o=n(4848),s=n(8453);const a={},i="Hover Effects",r={id:"api/hoverEffect",title:"Hover Effects",description:"This is an additional style option allowing to add hover effect when user looks at an element. It's applied to all Touchable and Pressable components by default.",source:"@site/docs/api/hoverEffect.md",sourceDirName:"api",slug:"/api/hoverEffect",permalink:"/react-native-visionos-docs/api/hoverEffect",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"api",previous:{title:"XR",permalink:"/react-native-visionos-docs/api/XR"},next:{title:"Window Manager",permalink:"/react-native-visionos-docs/api/window-manager"}},c={},l=[{value:"Example",id:"example",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",img:"img",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"hover-effects",children:"Hover Effects"}),"\n",(0,o.jsxs)(t.p,{children:["This is an additional style option allowing to add hover effect when ",(0,o.jsx)(t.strong,{children:"user looks at an element"}),". It's applied to all Touchable and Pressable components by default."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'<TouchableOpacity style={{ cursor: "pointer" }}>\n  <Text>Click me</Text>\n</TouchableOpacity>\n'})}),"\n",(0,o.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"Hover effect",src:n(8264).A+"",width:"856",height:"480"})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8264:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/visionos-hover-4ee8aedf82ca88e9a3a0de0250f7f380.gif"},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>r});var o=n(6540);const s={},a=o.createContext(s);function i(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);